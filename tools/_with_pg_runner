#!/usr/bin/env bash
set -Eeo pipefail

logpath="$PG_DEV_TMP_DIR/with_pg"
mkdir "$logpath" 2>/dev/null || true

# restart script as postgres user if run as root
if [ "$(id -u)" = '0' ]; then
  chmod 777 "$(dirname "$logpath")"
  chown postgres:postgres "$logpath"
  exec su-exec postgres "$0" "$@"
fi

source "$(which docker-entrypoint.sh)"

case $1 in
  start)
    PGDATA="$(mktemp -d)"
    export PGDATA

    function cleanup() {
      "$0" stop "$PGDATA"
    }
    trap cleanup ERR

    # hook into docker_ scripts
    # shellcheck disable=SC2034
    POSTGRES_INITDB_ARGS="--no-locale --nosync --auth=trust"

    docker_init_database_dir > "$logpath/initdb.log" 2>&1
    "$(dirname "$0")/_with_menu_item" i "show output for PG initdb" cat "$logpath/initdb.log"

    # TODO: output actual server log, too.
    docker_temp_server_start > "$logpath/startup.log" 2>&1
    "$(dirname "$0")/_with_menu_item" s "show output for PG startup" cat "$logpath/startup.log"

    docker_setup_db > "$logpath/entrypoint.log" 2>&1
    docker_process_init_files /docker-entrypoint-initdb.d/* >> "$logpath/entrypoint.log" 2>&1
    "$(dirname "$0")/_with_menu_item" e "show output for PG docker-entrypoint-initdb.d" cat "$logpath/entrypoint.log"

    echo "$PGDATA"
    ;;

  stop)
    PGDATA="$2"
    export PGDATA

    docker_temp_server_stop > "$logpath/shutdown.log" 2>&1
    "$(dirname "$0")/_with_menu_item" s "show output for PG shutdown" cat "$logpath/shutdown.log"
    rm -rf "$PGDATA"
    ;;

  *)
    exit 1
    ;;
esac
